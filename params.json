{
  "name": "Vitamin",
  "tagline": "ActiveRecord library for node.js applications",
  "body": "### Introduction\r\nVitamin provides a simple and easy to use ActiveRecord implementation for working with your database. It supports **Postgres**, **MySQL**, **MariaDB**, **SQLite3**, and **Oracle**.\r\n\r\nEach database table or view is wrapped into a \"Model\" class. Thus, a model instance is tied to a single row in the table. Models allow you to query for data in your tables, as well as inserting or updating records.\r\n\r\n***\r\n\r\n### Installation\r\n```sh\r\n$ npm install --save vitamin\r\n\r\n# Then add one of the following (adding a --save) flag:\r\n$ npm install pg\r\n$ npm install sqlite3\r\n$ npm install mysql\r\n$ npm install mysql2\r\n$ npm install mariasql\r\n$ npm install strong-oracle\r\n$ npm install oracle\r\n```\r\n\r\nDatabase connection is initialized by passing a config object to `connection` static method.\r\n\r\n```js\r\nvar Model = require('vitamin/model')\r\n\r\n// example of config \r\nModel.connection({\r\n  client: 'mysql',\r\n  connection: {\r\n    host     : '127.0.0.1',\r\n    user     : 'your_database_user',\r\n    password : 'your_database_password',\r\n    database : 'myapp_test',\r\n    charset  : 'utf8'\r\n  }\r\n})\r\n```\r\n> The [knex documentation](//knexjs.org/#Installation) provides a number of examples for different databases.\r\n\r\n***\r\n\r\n### Defining Model classes\r\nTo get started, let's define a basic Model using the `extend` static method, by specifying the `primary key` name and the `table` name\r\n\r\n```js\r\nvar Model = require('vitamin/model')\r\n\r\nvar Post = Model.extend({\r\n  \r\n  /**\r\n   * The table name associated with this model\r\n   */\r\n  $table:  \"posts\",\r\n  \r\n  /**\r\n   * The primary key name, by default 'id' is used\r\n   */\r\n  $pk: \"id\",\r\n  \r\n})\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}