{
  "name": "Vitamin",
  "tagline": "ActiveRecord library for node.js applications",
  "body": "### Introduction\r\nVitamin provides a simple and easy to use ActiveRecord implementation for working with your database. It supports **Postgres**, **MySQL**, **MariaDB**, **SQLite3**, and **Oracle**.\r\n\r\nEach database table or view is wrapped into a \"Model\" class. Thus, a model instance is tied to a single row in the table. Models allow you to query for data in your tables, as well as inserting or updating records.\r\n\r\nVitamin is featuring both promise based and traditional callback interfaces, providing lazy and eager relationships loading, and support for one-to-one, one-to-many, and many-to-many relations.\r\n\r\n***\r\n\r\n### Installation\r\n```sh\r\n$ npm install --save vitamin\r\n\r\n# Then add one of the following (adding a --save) flag:\r\n$ npm install pg\r\n$ npm install sqlite3\r\n$ npm install mysql\r\n$ npm install mysql2\r\n$ npm install mariasql\r\n$ npm install strong-oracle\r\n$ npm install oracle\r\n```\r\n\r\nDatabase connection is initialized by passing a config object to `connection` static method. The [knex documentation](//knexjs.org/#Installation) provides a number of examples for different databases.\r\n\r\n```js\r\nvar Model = require('vitamin/model')\r\n\r\n// provide a config object for MySQL which will be used by knex\r\nModel.connection({\r\n  client: 'mysql',\r\n  connection: {\r\n    host     : '127.0.0.1',\r\n    user     : 'your_database_user',\r\n    password : 'your_database_password',\r\n    database : 'myapp_test',\r\n    charset  : 'utf8'\r\n  }\r\n})\r\n```\r\n\r\n***\r\n\r\n### Defining Models\r\nTo get started, let's define a basic Model using the `extend` static method, and specify both, the `primary key` name, and the `table` name\r\n\r\n```js\r\nvar Model = require('vitamin/model')\r\n\r\nvar Post = Model.extend({\r\n  \r\n  /**\r\n   * The table name associated with this model\r\n   */\r\n  $table:  \"posts\",\r\n  \r\n  /**\r\n   * The primary key name, by default 'id' is used\r\n   */\r\n  $pk: \"id\",\r\n  \r\n})\r\n```\r\n> Vitamin assumes that the primary key is an auto-increment key, if you wish to use a non-numeric key, you must set to `false` the flag property `$incrementing` when you define the model.\r\n\r\n***\r\n\r\n### Retrieving models\r\n\r\nVitamin uses the standard Node.js style callbacks and promises when dealing with queries\r\n\r\n#### · Retrieving multiple models\r\n\r\n```js\r\n// Using callbacks\r\nPost.all(function (error, result) {\r\n  ...\r\n})\r\n\r\n// Using promises\r\nPost.all().then(\r\n  function (result) {\r\n    ...\r\n  },\r\n  function (error) {\r\n    ...\r\n  }\r\n)\r\n```\r\nThe `all` static method will return all of the results of the model. But, if you may also add constraints to queries, you can use the `where` method, which returns a `query builder` instance\r\n```js\r\n// Using callabcks\r\nPost.where('active', true).limit(10).fetchAll(function (error, result) {\r\n  ...\r\n})\r\n\r\n// Using promises\r\nPost.where('active', true).limit(10).fetchAll().then(\r\n  function (result) {\r\n    ...\r\n  },\r\n  function (error) {\r\n    ...\r\n  }\r\n)\r\n```\r\n\r\n#### · Retrieving single model\r\nOf course, in addition to retrieving all of the records for a given table, you may also retrieve single records using `find` and `fetch`. Instead of returning an array of models, these methods return only a single model instance\r\n\r\nTo retrieve a model by its primary key, use `find`\r\n```js\r\n// Using callbacks\r\nPost.find(1, function (error, result) {\r\n  ...\r\n})\r\n\r\n// Using promises\r\nPost.find(1).then(\r\n  function (result) {\r\n    ...\r\n  },\r\n  function (error) {\r\n    ...\r\n  }\r\n)\r\n```\r\nTo retrieve the first model matching the query constraints, use `fetch`\r\n```js\r\n// Using callbacks\r\nPost.where('published', 1).fetch(function (error, result) {\r\n  ...\r\n})\r\n\r\n// Using promises\r\nPost.where('published', 1).fetch().then(\r\n  function (result) {\r\n    ...\r\n  },\r\n  function (error) {\r\n    ...\r\n  }\r\n)\r\n```\r\n\r\n***\r\n\r\n### Model manipulation\r\n\r\n#### · Basic insert\r\nTo create a new record in the database, simply create a new model instance, set its attributes, then call the `save` method\r\n```js\r\nvar post = new Post\r\n\r\n// set attributes \r\npost.set('title', \"Sample title\")\r\npost.set('content', \"Sample content for the post\")\r\n\r\n// Using callbacks\r\npost.save(function (error, result) {\r\n  ...\r\n})\r\n\r\n// Using promises\r\npost.save()().then(\r\n  function (result) {\r\n    ...\r\n  },\r\n  function (error) {\r\n    ...\r\n  }\r\n)\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}